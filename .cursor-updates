# Cursor Updates

- ✅ **Tailwind CSS Enhanced Configuration** - Installed @tailwindcss/typography plugin, added comprehensive custom color palette (primary, secondary, accent, success, warning, error), configured production purge settings, enhanced global CSS with component classes, animations, and utilities. Typography plugin configured for both light and dark themes with prose styling.

**Rule for future projects:** Research Tailwind theme function syntax before configuration to avoid build errors. Use CSS custom properties systematically for dynamic theming support rather than hardcoded values.

- ✅ **ShadCN UI & Lucide Icons Integration** - Installed lucide-react icons library, initialized ShadCN UI with New York style and neutral base color, installed essential components (Button, Card, Input, Badge), created comprehensive showcase component demonstrating all features, verified tree-shaking is working (9/11 used icons found, minimal unused icons), set up proper theme extension with CSS custom properties, and confirmed build optimization.

**Rule for future projects:** Set up tree-shaking verification scripts early in development to catch bundling issues. Use sophisticated bundle analyzers for performance insights and optimization opportunities.

- ✅ **Supabase Project Infrastructure** - Installed @supabase/supabase-js client, created environment configuration structure with validation, set up Supabase client with proper error handling, created comprehensive setup documentation, built connection testing component with real-time status updates, added setup page at /setup for verifying configuration, and ensured build passes with proper TypeScript types.

**Rule for future projects:** Create CLI setup wizards to automate environment file creation and improve developer onboarding experience. Reduce manual configuration steps wherever possible.

- ✅ **Prisma Database Integration** - Installed Prisma and @prisma/client, configured schema.prisma for Supabase PostgreSQL with connection pooling, created Prisma client utilities with connection testing, added database scripts to package.json (db:generate, db:studio, db:push, db:migrate, db:reset), created API endpoint for connection testing, built connection test component with environment validation, updated setup page with database status checking, and ensured build passes with proper error handling.

**Rule for future projects:** Configure database connection pooling from project start rather than as an afterthought. Create automated schema synchronization scripts to maintain consistency across environments.

- ✅ **Supabase + Prisma Connection Resolution** - Diagnosed and resolved IPv6 connectivity issues in WSL2 environment by switching from direct database connection to Supabase's connection pooler, updated connection strings to use aws-0-us-west-1.pooler.supabase.com instead of direct db host, enhanced error logging and diagnostics for better troubleshooting, verified both Supabase API and Prisma database connections working successfully, and ensured build passes with proper connection pooling parameters.

**Rule for future projects:** Document WSL2 IPv6 connectivity limitations upfront in project setup docs. Default to connection pooler URLs immediately for better developer experience in containerized environments.

- ✅ **Automated Database Migration System** - Implemented comprehensive CI/CD-ready migration automation with enhanced npm scripts using dotenv-cli for .env.local loading, created robust bash script with environment detection and error handling, built TypeScript seed system with sample data, added extensive documentation with GitHub Actions examples, and verified complete workflow including dry-run testing, migration status verification, and production build compatibility.

**Rule for future projects:** Configure dotenv-cli from the beginning to avoid environment variable loading issues between different tools. Create separate staging database environments early for safer CI/CD testing workflows.

- ✅ **Centralized Logging & Error Boundary System** - Implemented comprehensive logging infrastructure with structured output for development and production, created multi-level React error boundaries (page/section/component) with user-friendly fallbacks, built global error handler for unhandled promise rejections and exceptions, integrated logging into existing Prisma and Supabase libraries, and provided interactive demo components for testing error handling and logging functionality in development.

**Rule for future projects:** Implement logging infrastructure early in the development process to capture detailed debugging information from the start. Create standardized error message patterns for consistent user experience across all error boundaries.

# Implemented Complete Data Model Schema for Unconf2

Successfully defined all core database models for the unconference platform: Event, Room, TimeBlock, Topic, Attendee, Vote, Session, and Note. Each model includes proper relationships, constraints, and snake_case table mapping. Created comprehensive seed script with demo data including one event, two rooms, three time blocks, sample topics, one test attendee, and demonstration votes. All models follow PostgreSQL best practices with UUID primary keys, proper foreign key relationships, and soft delete capability for topics.

**Rule for future projects:** When designing complex relational schemas, define all models together in a single session to ensure proper relationship mapping and avoid circular dependency issues. Always create the seed script immediately after the schema to validate the relationships work correctly before proceeding to application logic.

# Data Modeling Phase Complete - Critical Prisma & Environment Learnings

Completed all 9 data modeling tasks including Event, Room, TimeBlock, Topic, Attendee, Vote, Session, and Note models with full relational constraints. Successfully migrated from placeholder User model to complete unconference schema. Created seed script with realistic demo data and verified database connectivity. Build passes and all changes committed.

**Critical Environment Variable Learning:** Prisma Studio requires explicit environment loading via `npm run db:studio` (which uses `dotenv -e .env.local`) rather than direct `npx prisma studio` commands. The latter only loads `.env` files, missing critical Supabase credentials in `.env.local`. This caused "fetch failed" errors in Studio UI until proper environment loading was used.

**Migration Workflow Insight:** When replacing existing models entirely, create new migration with `npm run db:migrate -- --name "descriptive-name"` rather than attempting to modify existing migrations. Prisma correctly handles dropping old tables and creating new ones with proper foreign key constraints.

**Rule for future projects:** Always use project-specific npm scripts for Prisma commands (db:studio, db:migrate, db:seed) rather than direct npx commands, as they ensure proper environment variable loading. Set up database testing early with both Prisma Studio and API endpoints to validate connectivity from multiple angles. Document environment setup clearly to avoid credential overwrites during template copying.

# Implemented AppShell with Complete UI Foundation

Successfully created comprehensive AppShell component with sticky header, responsive container, toast notifications, and dark mode toggle. Integrated next-themes for theme management with system preference detection. Header includes placeholder navigation and branding with proper responsive design. Toast system uses ShadCN components with proper accessibility. Dark mode toggle provides light/dark/system options via dropdown menu.

**Component Architecture Insight:** AppShell pattern provides clean separation of layout concerns from page content. Sticky header with backdrop blur gives modern glassmorphism effect while maintaining readability. Toast positioning outside main content prevents layout shifts during notifications.

**Rule for future projects:** Install theme management early in development to avoid hydration issues later. Use ShadCN component patterns consistently for UI cohesion. Structure app shell to be layout-agnostic so individual pages don't need to handle common UI elements like headers, footers, or notifications.

# Fixed Critical UI Rendering Issues and Navigation

Resolved major UI problems including broken SVG icons rendering as huge black shapes and non-functional header navigation. Replaced all inline SVG icons with proper Lucide React components (Calendar, Vote, Lightbulb, FileText) which render correctly with proper sizing. Fixed header navigation links to point to actual routes (/, /setup, /showcase) instead of placeholder "#" anchors. Theme toggle now displays proper icons instead of "Toggle theme" text.

**Icon Implementation Learning:** Inline SVG elements can fail to render properly in Next.js SSR environments, appearing as large black shapes. Lucide React components are more reliable as they're specifically designed for React applications and handle SSR correctly. Always prefer component libraries over inline SVGs for consistency.

**Rule for future projects:** Use established icon component libraries (Lucide React, Heroicons, etc.) instead of inline SVG code to avoid rendering issues. Test icon rendering in both development and production builds. Ensure all navigation links point to actual routes from the start rather than using placeholder anchors that confuse users during development.

# Implemented Comprehensive Supabase Auth Wrapper

Successfully implemented client-only authentication system supporting both anonymous sessions for attendees and JWT-based authentication for organizers. Created AuthProvider context with React useReducer for state management, supporting anonymous user persistence via localStorage and seamless transitions between anonymous and authenticated states. Auth wrapper provides hooks (useAuth, useUser, useSession, useIsAuthenticated, useIsOrganizer) for easy component integration. Header displays auth status with "Join Event" button for anonymous users and user badge plus sign out for authenticated users.

**Authentication Architecture Insight:** Anonymous sessions require careful localStorage management to persist user data across page reloads while maintaining the ability to upgrade to authenticated sessions. Reducer pattern works well for complex auth state with multiple user types (anonymous attendees, authenticated organizers). Auth context placement outside AppShell but inside ThemeProvider ensures auth state is available throughout the app while maintaining proper component hierarchy.

**Rule for future projects:** Design auth systems with anonymous users as first-class citizens rather than afterthoughts. Use TypeScript discriminated unions for user types to ensure type safety. Implement auth state as early as possible in the component tree but after essential providers like theme. Create comprehensive auth debug components during development to test all auth flows including sign in, sign out, and state transitions.

# Fixed Critical SSR Crash from Auth Provider Browser API Access

Resolved server-side rendering crash caused by auth provider attempting to access localStorage and other browser APIs during SSR. Added mounted state tracking with useEffect to ensure all browser-specific code only runs after client-side hydration. Implemented fallback auth context during SSR phase to prevent hydration mismatches. All localStorage operations now properly guarded with mounted and window checks. Auth debug component also updated with proper mounting guards to prevent SSR issues.

**SSR Architecture Learning:** Client-side auth providers must carefully handle the server-client boundary when using browser APIs like localStorage. Even with "use client" directive, components can still run during SSR in certain conditions. Mounted state pattern with useEffect is essential for ensuring browser API access only happens after hydration. Providing fallback values during SSR prevents hydration mismatches that can cause React errors.

**Rule for future projects:** Always implement mounted state tracking for any component that accesses browser APIs, even in "use client" components. Guard localStorage, sessionStorage, window, and document access with both typeof window checks and mounted state. Provide appropriate fallback values during SSR to maintain component structure. Clear Next.js cache (.next directory) when resolving bundling issues related to external dependencies.

# Resolved Tailwind CSS Version Conflict and Styling Issues

Fixed complete styling failure caused by conflicting Tailwind CSS v3 and v4 dependencies running simultaneously. Removed @tailwindcss/postcss v4 dependency that was causing "Cannot apply unknown utility class" errors. Updated postcss.config.js to use standard tailwindcss plugin instead of v4-specific syntax. Created missing /setup and /showcase pages to resolve build failures. All pages now load successfully with proper Tailwind CSS styling applied.

**Build System Learning:** Version conflicts between major framework versions can cause cryptic build errors that seem unrelated to the actual issue. Tailwind v4 introduces breaking changes including new @reference directive requirements and different PostCSS plugin structure. When seeing "unknown utility class" errors, check for dependency conflicts first before debugging CSS configuration. Build success doesn't guarantee runtime success - always test actual page loading after resolving build issues.

**Rule for future projects:** Maintain consistent major versions across related dependencies (e.g., all Tailwind packages should be v3 OR v4, not mixed). Check package.json carefully when adding new CSS framework features. Use exact version pinning for critical styling dependencies. Test both build AND runtime after resolving dependency conflicts. Create placeholder pages for all navigation links early to prevent build failures during development.

# Implemented Global React Query Provider with Supabase Realtime Integration

Successfully installed @tanstack/react-query and @tanstack/react-query-devtools, created comprehensive QueryClient configuration with optimized stale/retry times (5min stale, 10min cache, 3 retries with exponential backoff), implemented intelligent retry logic that avoids retrying 4xx client errors, integrated Supabase Realtime websocket listeners for automatic query invalidation across all tables (Event, Room, Topic, Vote, Session, Note, Attendee), created utility hooks for common query operations and cache management, and added QueryProvider to the app layout hierarchy. Build passes successfully with proper TypeScript error handling and linting compliance.

**Rule for future projects:** Configure React Query defaults thoughtfully from the start - longer stale times reduce unnecessary network requests while shorter cache times prevent memory bloat. When integrating with realtime systems like Supabase, set up automatic query invalidation immediately to ensure UI stays synchronized with database changes. Create query key factories early to maintain consistent caching patterns across the application. Always handle unknown error types properly in retry logic to avoid TypeScript linting issues.

# Implemented Organiser Wizard Step 1 - Event Details Form

Successfully created comprehensive organiser wizard infrastructure with Step 1 Event Details form. Installed react-hook-form, @hookform/resolvers, and zod for robust form handling. Built complete wizard framework with progress indicator, localStorage-based draft persistence, and step navigation. Step 1 features title/date/time validation with Zod schema, optimistic auto-saving (500ms debounce), real-time validation feedback, helpful time format suggestions, and accessibility-compliant form design. Added /organiser route to navigation with proper TypeScript interfaces and error handling. Build passes successfully with 28.8 kB bundle size for organiser route.

**Rule for future projects:** Implement form auto-saving with proper debouncing from the start to prevent data loss during wizard flows. Use Zod schemas for comprehensive validation including cross-field validation (e.g., end time after start time). Create placeholder components for incomplete wizard steps to maintain build compatibility while developing incrementally. Always validate both individual fields and relationships between fields in multi-step forms.

# Implemented Organiser Wizard Step 2 - Rooms Management with Drag & Drop

Successfully created complete Rooms step with advanced UX features. Installed @dnd-kit packages for accessible drag-and-drop functionality. Built dynamic room list with add/remove capabilities (1-10 rooms), form validation using Zod schema (name 1-50 chars, capacity 1-1000), drag-to-reorder with visual feedback and accessibility support, auto-saving with 500ms debounce, and room suggestions for common unconference setups. Features sortable cards with grip handles, individual room validation, proper TypeScript types, and seamless integration with wizard persistence. Build passes successfully with 46.8 kB bundle size including full drag-and-drop library.

**Rule for future projects:** Choose @dnd-kit over react-beautiful-dnd for new projects as it provides better accessibility, touch support, and TypeScript integration. Implement proper filter logic in auto-save to avoid saving incomplete/invalid data while maintaining user experience. When building drag-and-drop interfaces, always include visual feedback (opacity, shadows) and proper accessibility attributes for screen readers and keyboard navigation.

# Completed Organiser Wizard with Time Blocks, Event Creation & QR Code

Successfully implemented the complete organiser wizard flow with Step 3 Time Blocks, event creation API, and QR code generation. Time Blocks step features time-range pickers with automatic duration calculation, conflict detection with visual warnings, drag-and-drop reordering, and smart next-time suggestions. Created event creation API with collision-safe 6-character short ID generation and complete database integration via Prisma. Built comprehensive QR code component with SVG generation, copy-to-clipboard, and PNG download functionality. Wizard completion displays beautiful success screen with QR code, next steps guidance, and event management options. Created dynamic `/e/[shortId]` route for event access URLs with proper metadata generation. Build passes successfully with all components working together.

**Rule for future projects:** When implementing collision-safe ID generation, use character sets that avoid ambiguous characters (0/O, 1/l, I) to prevent user confusion. For QR code generation in production, use established libraries like `qrcode` rather than implementing custom algorithms. Always implement conflict detection with real-time visual feedback rather than only validating on submission - it significantly improves user experience. Handle database schema changes carefully by commenting out new fields until migrations can be properly applied to avoid build failures.

# Fixed QR Codes & Added Events Listing with Memorable Slugs

Successfully fixed the fake QR code generator by implementing the real `qrcode` library for generating actual scannable QR codes. QR component now generates proper codes with copy-to-clipboard, PNG download, and loading states. Created comprehensive events listing page at `/events` showing all conferences with live status indicators (Upcoming/Live Now/Completed), attendee counts, room previews, and join buttons. Added memorable event slug generation utilities using two-word combinations like "tech-summit" and "brilliant-workshop" with collision detection. Updated navigation to include Events link. Build passes successfully with real QR codes working.

**Rule for future projects:** Always use established libraries (like `qrcode`) for standard functionality rather than implementing custom algorithms. When dealing with database schema changes that require environment setup, implement temporary workarounds (like storing data in JSON fields) to maintain development momentum while planning proper migrations. Create comprehensive listing pages early to help users discover and navigate content - they provide immediate value and help test the data model.

# Implemented Memorable URLs, Event QR Codes & Edit Interface

Successfully implemented memorable URL routing using friendly slugs like "tech-summit" and "brilliant-workshop" stored in event settings. Events now accessible via `/e/outstanding-hackathon` instead of long UUIDs. Updated API to return friendly slug URLs and QR codes. Added QR code display to event pages with sharing interface showing full URLs and instructions. Created event edit page at `/organiser/edit/[eventId]` with overview of event details, rooms, time blocks, and attendee/topic counts. Updated all internal links to use friendly slugs while maintaining UUID fallback compatibility. Build passes successfully with proper routing.

**Rule for future projects:** When implementing URL routing with memorable slugs, always maintain backwards compatibility with existing ID-based URLs during transition periods. Store friendly slugs in temporary locations (like JSON settings) when database schema changes are blocked by environment issues. Implement QR codes and sharing interfaces on content pages to improve discovery and user engagement. Create edit interfaces early even if they're placeholder pages - they help establish the information architecture and user workflows.

# Added Event Deletion and Fixed URL Display Issues

Successfully implemented comprehensive event deletion functionality with confirmation dialogs and safety warnings for events with existing activity. Fixed URL display in event pages to show full URLs instead of relative paths using client-side components. Added edit links to events listing for better management workflow.

**Rule for future projects:** For destructive actions like deletion, always implement multi-step confirmation with clear warnings about data loss, and consider the impact on related data (attendees, topics) when designing the confirmation flow.

# Implemented Full Event Editing with Friendly Slug URLs

Successfully replaced placeholder edit interface with comprehensive event editing functionality using memorable friendly slug URLs. Created EventEditForm component with tabbed interface for editing event details, rooms, and time blocks. Implemented complete API backend with PATCH/PUT endpoints for updates. Edit URLs now use friendly slugs (e.g., `/organiser/edit/tech-summit`) instead of UUIDs. Added form validation, conflict detection, real-time editing, and support for adding/removing rooms and time blocks dynamically.

**Rule for future projects:** When building editing interfaces, use tabbed layouts to organize complex forms and implement real-time validation with user-friendly error messages. Always prioritize friendly URLs over technical IDs in user-facing interfaces, even if it requires additional lookup logic.

# Implemented Attendee Landing Page and Onboarding Flow

Successfully created complete attendee onboarding system for QR code visitors. Built AttendeeJoinForm component with name/email validation and optional anonymous joining. Created attendee API endpoints for creating and fetching attendee records. Implemented EventLanding component that conditionally shows join form or main event view based on localStorage. Added session persistence and automatic reconnection for returning visitors. Supports both named attendees and anonymous users with proper data validation and user-friendly error handling.

**Rule for future projects:** For user onboarding flows, always implement client-side state management with localStorage persistence to remember user sessions across page reloads. Design forms with progressive disclosure (optional fields) to reduce friction while still capturing useful data when users are willing to provide it.

# Implemented Interest & Topic Entry Form with Chips Input

Successfully created AttendeeInterestsForm component with interactive chips-based interest input and multiline topic proposal textarea. Implemented chips functionality with add/remove capabilities, Enter key support, and validation (max 20 interests, 50 chars each). Built comprehensive form with interests array management, topic creation via API, and attendee interest updates. Form includes proper TypeScript validation, error handling, loading states, and skip functionality. API endpoints for topics and attendee updates were already implemented, enabling full functionality. Component uses ShadCN Badge components for visual chips and includes proper accessibility features.

**Rule for future projects:** When building interactive input components like chips, implement keyboard shortcuts (Enter to add) and visual feedback immediately for better user experience. Validate API availability before building forms - having existing endpoints saves significant development time. Use established component libraries (like ShadCN Badge) for consistent styling rather than creating custom chip components from scratch.


# Implemented Interest & Topic Entry Form with Chips Input

Successfully created AttendeeInterestsForm component with interactive chips-based interest input and multiline topic proposal textarea. Implemented chips functionality with add/remove capabilities, Enter key support, and validation (max 20 interests, 50 chars each). Built comprehensive form with interests array management, topic creation via API, and attendee interest updates. Form includes proper TypeScript validation, error handling, loading states, and skip functionality. API endpoints for topics and attendee updates were already implemented, enabling full functionality. Component uses ShadCN Badge components for visual chips and includes proper accessibility features.

**Rule for future projects:** When building interactive input components like chips, implement keyboard shortcuts (Enter to add) and visual feedback immediately for better user experience. Validate API availability before building forms - having existing endpoints saves significant development time. Use established component libraries (like ShadCN Badge) for consistent styling rather than creating custom chip components from scratch.

# Implemented Admin Authentication Infrastructure

Successfully built foundational admin authentication system with password-based access control. Added core admin functions to auth.ts including validateAdminPassword with default password '1106', admin session management with localStorage persistence, and admin storage key constants. Infrastructure supports admin-only access to event creation, editing, and deletion functionality. System provides 24-hour session timeout and secure password validation. Foundation ready for UI integration across event management components.

**Rule for future projects:** When implementing admin authentication, build the core infrastructure first (password validation, session management, storage keys) in a central auth module before creating UI components. Use localStorage for simple admin sessions with timeout validation. Keep admin functions separate from regular user authentication to maintain clean separation of concerns and easier testing.

# Admin Access Implementation Complete

Successfully implemented comprehensive admin authentication system that protects event management functionality. Only administrators with the correct password (1106) can now create, edit, and delete events.

**Rule for future projects:** When implementing admin functionality, create reusable admin protection components early and apply them consistently across all protected routes. Consider using a HOC or context provider pattern for cleaner admin state management instead of duplicating admin logic in each protected component.

# Improved Admin Protection with Friendly Modal

Created user-friendly AdminAuthModal component that provides consistent admin authentication across all protected actions. Modal features clean design with blue shield icon, helpful explanatory text, and no password hints for security. Component is reusable and can be integrated into any admin-protected functionality.

**Rule for future projects:** Create reusable modal components for authentication flows early and use consistent, friendly UI patterns. Avoid revealing sensitive information like passwords in help text - use contextual explanations instead.
